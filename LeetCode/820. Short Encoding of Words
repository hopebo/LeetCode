// 使用TrieTree构造单词的反序，反序相同的，只需要最长的叶子结点即可。
class Solution {
public:
    class Node 
    {
    public:
        Node* next[26] = { NULL };
    };
    
    int minimumLengthEncoding(vector<string>& words) {
        Node* root = new Node;
        for (auto word : words)
        {
            Node* p = root;
            for (int i = (int)word.size() - 1; i >= 0; i--)
            {
                if (p->next[word[i] - 'a'] == NULL)
                {
                    p->next[word[i] - 'a'] = new Node;
                }
                p = p->next[word[i] - 'a'];
            }
        }
        int res = 0;
        SubstringLength(root, res, 0);
        return res;
    }
    
    void SubstringLength(Node* p, int& res, int cur)
    {
        bool isLeaf = true;
        for (int i = 0; i < 26; i++)
        {
            if (p->next[i] != NULL)
            {
                isLeaf = false;
                SubstringLength(p->next[i], res, cur + 1);
            }
        }
        if (isLeaf)
        {
            res += cur + 1;
        }
    }
};
