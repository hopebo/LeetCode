// 采用优先级队列 + BFS的方法，优先搜索较少时间内能够到达的位置
int dir[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
class Solution {
public:
    int swimInWater(vector<vector<int> >& grid) {
        int m = grid.size(), n = grid[0].size();
        priority_queue<vector<int>, vector<vector<int> >, greater<vector<int> > > pq;
        pq.push(vector<int>{grid[0][0], 0, 0});
        grid[0][0] = -1;
        while (!pq.empty())
        {
            int cur = pq.top()[0];
            while (!pq.empty() && pq.top()[0] == cur)
            {
                auto pos = pq.top();
                pq.pop();
                for (int k = 0; k < 4; k++)
                {
                    int x = pos[1] + dir[k][0];
                    int y = pos[2] + dir[k][1];
                    if (x < 0 || y < 0 || x >= m || y >= n || grid[x][y] == -1)
                    {
                        continue;
                    }
                    pq.push(vector<int>{max(pos[0], grid[x][y]), x, y});
                    if (x == m - 1 && y == n - 1)
                    {
                        return max(pos[0], grid[x][y]);
                    }
                    grid[x][y] = -1;
                }
            }
        }
        return 0;
    }
};
